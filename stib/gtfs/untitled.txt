# -*- coding: utf-8 -*-
from time import gmtime

# TODO:
# - seperate header from contextual data
# - use $nnnnnnnn key from SNCF database instead of code name
# - move dicts to catalog directory
sibas_diagnosis = [
    {
        "descr": "Type",
        "offset": 0, "size": 2, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Datasetlen",
        "offset": 2, "size": 4, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "CarNo",  # "Numero de vehicule",
        "offset": 6, "size": 4, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Component",  # "Poste de commande",
        "offset": 10, "size": 2, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Memory",
        "offset": 12, "size": 2, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "MemVersionID Release",
        "offset": 14, "size": 2, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "MemVersionID Version",
        "offset": 16, "size": 2, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "SW-Version Release",
        "offset": 18, "size": 2, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "SW-Version Version",
        "offset": 20, "size": 2, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "CodeID",  # "Code de diagnostic",
        "offset": 22, "size": 4, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "OpMode",
        "offset": 26, "size": 2, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Count",
        "offset": 28, "size": 2, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "CountInsp",
        "offset": 30, "size": 2, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "DateTimeOccUTC",
        "offset": 32, "size": 4, "signed": True,
        "xfn": gmtime,
        "unit": None,
    },
    {
        "descr": "DateTimeOccLoc",
        "offset": 36, "size": 4, "signed": True,
        "xfn": gmtime,
        "unit": None,
    },
    {
        "descr": "DateTimeGoneUTC",
        "offset": 40, "size": 4, "signed": True,
        "xfn": gmtime,
        "unit": None,
    },
    {
        "descr": "DateTimeGoneLoc",
        "offset": 44, "size": 4, "signed": True,
        "xfn": gmtime,
        "unit": None,
    },
    {
        "descr": "EventCount",
        "offset": 48, "size": 4, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "EventStatus",
        "offset": 52, "size": 4, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Classification",
        "offset": 56, "size": 2, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "AccessMode",
        "offset": 58, "size": 2, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "OccDataType",
        "offset": 60, "size": 2, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "OccDataLen",
        "offset": 64, "size": 4, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "OccTraceCount",
        "offset": 68, "size": 2, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "CountAbs",
        "offset": 70, "size": 2, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "CountAbsInsp",
        "offset": 72, "size": 2, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Loco num.slave",
        "offset": 76, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Unite de commande No",
        "offset": 80, "size": 2, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Duree de marche LCU",
        "offset": 82, "size": 4, "signed": True,
        "xfn": lambda x: float(x * 5368710.0 / 1073740000.0),
        "unit": "s",
    },
    {
        "descr": "Temperature dans LCU",
        "offset": 86, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 409.6 / 16384.0),
        "unit": "C",
    },
    {
        "descr": "Temperature exterieure",
        "offset": 88, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 409.6 / 16384.0),
        "unit": "C",
    },
    {
        "descr": "Kilometrage",
        "offset": 90, "size": 4, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": "km",
    },
    {
        "descr": "v-reelle",
        "offset": 94, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 1.0 / 1.0),
        "unit": "km/h",
    },
    {
        "descr": "Reference de diametre de roue",
        "offset": 96, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 1024.0 / 16384.0),
        "unit": "mm",
    },
    {
        "descr": "Diametre de roue mot. trac. A1",
        "offset": 98, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 1024.0 / 16384.0),
        "unit": "mm",
    },
    {
        "descr": "Diametre de roue mot. trac. A2",
        "offset": 100, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 1024.0 / 16384.0),
        "unit": "mm",
    },
    {
        "descr": "Diametre de roue mot. trac. B1",
        "offset": 102, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 1024.0 / 16384.0),
        "unit": "mm",
    },
    {
        "descr": "Diametre de roue mot. trac. B2",
        "offset": 104, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 1024.0 / 16384.0),
        "unit": "mm",
    },
    {
        "descr": "Consigne F_traction en %",
        "offset": 106, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 100.0 / 16384.0),
        "unit": "%",
    },
    {
        "descr": "Consigne F_freinage en %",
        "offset": 108, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 100.0 / 16384.0),
        "unit": "%",
    },
    {
        "descr": "Csg F_trac/frein chaine trac.1",
        "offset": 110, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 1024.0 / 16384.0),
        "unit": "kN",
    },
    {
        "descr": "Csg F_trac/frein chaine trac.2",
        "offset": 112, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 1024.0 / 16384.0),
        "unit": "kN",
    },
    {
        "descr": "F_trac/frein elec. chaine trac.1",
        "offset": 114, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 1024.0 / 16384.0),
        "unit": "kN",
    },
    {
        "descr": "F_trac/frein elec. chaine trac.2",
        "offset": 116, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 1024.0 / 16384.0),
        "unit": "kN",
    },
    {
        "descr": "F_trac max disponible Chaine trac.1",
        "offset": 118, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 1024.0 / 16384.0),
        "unit": "kN",
    },
    {
        "descr": "F_trac max disponible Chaine trac.2",
        "offset": 120, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 1024.0 / 16384.0),
        "unit": "kN",
    },
    {
        "descr": "Diesel niveau combustible",
        "offset": 122, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 4000.0 / 16384.0),
        "unit": "l",
    },
    {
        "descr": "Diesel temp. liquide refroid",
        "offset": 124, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 409.6 / 16384.0),
        "unit": "C",
    },
    {
        "descr": "Diesel pression huile lubrif.",
        "offset": 126, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 10.24 / 16384.0),
        "unit": "bar",
    },
    {
        "descr": "A/N signal charge mot. diesel 16 V",
        "offset": 128, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 16.384 / 16384.0),
        "unit": "V",
    },
    {
        "descr": "Regime prescrit moteur diesel",
        "offset": 130, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 1638.4 / 16384.0),
        "unit": "1/min",
    },
    {
        "descr": "Regime reel moteur diesel",
        "offset": 132, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 1638.4 / 16384.0),
        "unit": "U/min",
    },
    {
        "descr": "Mot. diesel surcharge de puissance",
        "offset": 134, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 1.0 / 1.0),
        "unit": "kW",
    },
    {
        "descr": "Mot.diesel correction vitesse",
        "offset": 136, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 1.0 / 1.0),
        "unit": "kW",
    },
    {
        "descr": "Etat mot.diesel Lancement normal",
        "offset": 138, "size": 1, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 0) else 0,
        "unit": None,
    },
    {
        "descr": "Etat mot.diesel Prechauffage",
        "offset": 138, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 1) else 0,
        "unit": None,
    },
    {
        "descr": "Etat mot.diesel Lancement de secours",
        "offset": 138, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 2) else 0,
        "unit": None,
    },
    {
        "descr": "Etat mot.diesel Fonct. normal",
        "offset": 138, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 3) else 0,
        "unit": None,
    },
    {
        "descr": "Etat mot.diesel Fonct. degrade",
        "offset": 138, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 4) else 0,
        "unit": None,
    },
    {
        "descr": "Etat mot.diesel Arret normal",
        "offset": 138, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 5) else 0,
        "unit": None,
    },
    {
        "descr": "Etat mot.diesel Arret d'urgence",
        "offset": 138, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 6) else 0,
        "unit": None,
    },
    {
        "descr": "Etat mot.diesel Diesel arrete",
        "offset": 138, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 7) else 0,
        "unit": None,
    },
    {
        "descr": "Signal Lancement moteur a ECU",
        "offset": 139, "size": 1, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 0) else 0,
        "unit": None,
    },
    {
        "descr": "Ordre Arret moteur a ECU",
        "offset": 139, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 1) else 0,
        "unit": None,
    },
    {
        "descr": "Q-(CO)-CHE1 Marche",
        "offset": 139, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 2) else 0,
        "unit": None,
    },
    {
        "descr": "Q-(CO)-CHE2 Marche",
        "offset": 139, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 3) else 0,
        "unit": None,
    },
    {
        "descr": "Q-PRE-CHE1 Marche",
        "offset": 139, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 4) else 0,
        "unit": None,
    },
    {
        "descr": "Q-PRE-CHE2 Marche",
        "offset": 139, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 5) else 0,
        "unit": None,
    },
    {
        "descr": "Dem Chauffage de rechange BT Marche",
        "offset": 139, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 6) else 0,
        "unit": None,
    },
    {
        "descr": "Depreparation",
        "offset": 139, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 7) else 0,
        "unit": None,
    },
    {
        "descr": "Post-refroidissement",
        "offset": 140, "size": 1, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 0) else 0,
        "unit": None,
    },
    {
        "descr": "Contacteur C-PREGO Marche",
        "offset": 141, "size": 1, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 0) else 0,
        "unit": None,
    },
    {
        "descr": "Puissance Chauffage de rechange BT",
        "offset": 142, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 1.0 / 1.0),
        "unit": "kW",
    },
    {
        "descr": "Limite puiss. Temp. liqu. refroid",
        "offset": 144, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 1.0 / 1.0),
        "unit": "kW",
    },
    {
        "descr": "Test de composants Diesel actif",
        "offset": 146, "size": 1, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 0) else 0,
        "unit": None,
    },
    {
        "descr": "Diesel Alarme rouge",
        "offset": 146, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 1) else 0,
        "unit": None,
    },
    {
        "descr": "Diesel Alarme jaune",
        "offset": 146, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 2) else 0,
        "unit": None,
    },
    {
        "descr": "Diesel Prechauffage actif",
        "offset": 146, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 3) else 0,
        "unit": None,
    },
    {
        "descr": "Diesel Prechauffage (bougies)",
        "offset": 146, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 4) else 0,
        "unit": None,
    },
    {
        "descr": "Diesel Appro. combustible necessaire",
        "offset": 146, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 5) else 0,
        "unit": None,
    },
    {
        "descr": "Signal de charge moteur valide",
        "offset": 146, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 6) else 0,
        "unit": None,
    },
    {
        "descr": "Mot logique puissance mot. Diesel",
        "offset": 148, "size": 2, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Pression de consigne RE",
        "offset": 150, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 10.0 / 16384.0),
        "unit": "bar",
    },
    {
        "descr": "Pression de regime memorisee",
        "offset": 152, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 10.0 / 16384.0),
        "unit": "bar",
    },
    {
        "descr": "Pression CG",
        "offset": 154, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 10.0 / 16384.0),
        "unit": "bar",
    },
    {
        "descr": "Pression cylindre de frein chaine trac 1",
        "offset": 156, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 10.24 / 16384.0),
        "unit": "bar",
    },
    {
        "descr": "Pression cylindre de frein chaine trac 2",
        "offset": 158, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 10.24 / 16384.0),
        "unit": "bar",
    },
    {
        "descr": "Pression CP",
        "offset": 160, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 10.24 / 16384.0),
        "unit": "bar",
    },
    {
        "descr": "Pression RE",
        "offset": 162, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 10.24 / 16384.0),
        "unit": "bar",
    },
    {
        "descr": "CAB1 Source d'ordres valide",
        "offset": 164, "size": 1, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 0) else 0,
        "unit": None,
    },
    {
        "descr": "CAB2 Source d'ordres valide",
        "offset": 164, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 1) else 0,
        "unit": None,
    },
    {
        "descr": "WTB Source d'ordres valide",
        "offset": 164, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 2) else 0,
        "unit": None,
    },
    {
        "descr": "Pup.princ. 1 Source d'ordres valide",
        "offset": 164, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 3) else 0,
        "unit": None,
    },
    {
        "descr": "Pup.princ. 2 Source d'ordres valide",
        "offset": 164, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 4) else 0,
        "unit": None,
    },
    {
        "descr": "Pup. aux. 1 Source d'ordres valide",
        "offset": 164, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 5) else 0,
        "unit": None,
    },
    {
        "descr": "Pup. aux. 2 Source d'ordres valide",
        "offset": 164, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 6) else 0,
        "unit": None,
    },
    {
        "descr": "Arret d'urgence",
        "offset": 164, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 7) else 0,
        "unit": None,
    },
    {
        "descr": "Sens de marche CAB 1",
        "offset": 165, "size": 1, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 0) else 0,
        "unit": None,
    },
    {
        "descr": "Sens de marche CAB 2",
        "offset": 165, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 1) else 0,
        "unit": None,
    },
    {
        "descr": "Sens de marche Neutre",
        "offset": 165, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 2) else 0,
        "unit": None,
    },
    {
        "descr": "Alarme incendie",
        "offset": 165, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 3) else 0,
        "unit": None,
    },
    {
        "descr": "Mot d'etat Inhib. traction",
        "offset": 166, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Inhib. traction cette Loco",
        "offset": 170, "size": 1, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 0) else 0,
        "unit": None,
    },
    {
        "descr": "Facteur de reduction de puissance",
        "offset": 172, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 1.0 / 16384.0),
        "unit": None,
    },
    {
        "descr": "Cause de l'interrupt. test de comp.",
        "offset": 174, "size": 2, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Temperature alternateur stator",
        "offset": 176, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 409.6 / 16384.0),
        "unit": "C",
    },
    {
        "descr": "Tension prescrite circuit interm.",
        "offset": 178, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 4096.0 / 16384.0),
        "unit": "V",
    },
    {
        "descr": "Meilleur mesure tension CI S1",
        "offset": 180, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 4096.0 / 16384.0),
        "unit": "V",
    },
    {
        "descr": "Courant reel d'excitation",
        "offset": 182, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 8.193 / 16384.0),
        "unit": "A",
    },
    {
        "descr": "Val. moy. courant phase Alternateur",
        "offset": 184, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 4096.0 / 16384.0),
        "unit": "A",
    },
    {
        "descr": "Diff. max. courant phase Alternateur",
        "offset": 186, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 1.0 / 1.0),
        "unit": "A",
    },
    {
        "descr": "Puissance alternateur sur CI",
        "offset": 188, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 1.0 / 1.0),
        "unit": "kW",
    },
    {
        "descr": "Sig.retour Contacteur excit ferme sur",
        "offset": 190, "size": 2, "signed": True,
        "xfn": lambda x: 1 if int(x) & (1 << 0) else 0,
        "unit": None,
    },
    {
        "descr": "Mot d'etat 1 Alternateur",
        "offset": 192, "size": 2, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot d'etat 2 Alternateur",
        "offset": 194, "size": 2, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot d'etat 3 Alternateur",
        "offset": 196, "size": 2, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Temperature interieur CV1",
        "offset": 198, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 409.6 / 16384.0),
        "unit": "C",
    },
    {
        "descr": "Pression refrigerant CV1",
        "offset": 200, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 10.24 / 16384.0),
        "unit": "bar",
    },
    {
        "descr": "Temperature refrigerant CV1",
        "offset": 202, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 409.6 / 16384.0),
        "unit": "C",
    },
    {
        "descr": "Temp.modele rotor mot.trac OND A",
        "offset": 204, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 409.6 / 16384.0),
        "unit": "C",
    },
    {
        "descr": "Temp.modele rotor mot.trac OND B",
        "offset": 206, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 409.6 / 16384.0),
        "unit": "C",
    },
    {
        "descr": "Tension CI reelle Circuit interm. A",
        "offset": 208, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 4096.0 / 16384.0),
        "unit": "V",
    },
    {
        "descr": "Tension CI reelle Circuit interm. B",
        "offset": 210, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 4096.0 / 16384.0),
        "unit": "V",
    },
    {
        "descr": "Couple apres rampe OND A",
        "offset": 212, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 65536.0 / 16384.0),
        "unit": "Nm",
    },
    {
        "descr": "Couple apres rampe OND B",
        "offset": 214, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 65536.0 / 16384.0),
        "unit": "Nm",
    },
    {
        "descr": "Limitation couple DLST OND A",
        "offset": 216, "size": 2, "signed": False,
        "xfn": lambda x: float(x * 65536.0 / 16384.0),
        "unit": "Nm",
    },
    {
        "descr": "Limitation couple DLST OND B",
        "offset": 218, "size": 2, "signed": False,
        "xfn": lambda x: float(x * 65536.0 / 16384.0),
        "unit": "Nm",
    },
    {
        "descr": "Couple apres AE/AP OND A",
        "offset": 220, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 65536.0 / 16384.0),
        "unit": "Nm",
    },
    {
        "descr": "Couple apres AE/AP OND B",
        "offset": 222, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 65536.0 / 16384.0),
        "unit": "Nm",
    },
    {
        "descr": "Val.mesure capteur vitesse Mot.trac A1",
        "offset": 224, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 40.96 / 16384.0),
        "unit": "1/s",
    },
    {
        "descr": "Val.mesure capteur vitesse Mot.trac A2",
        "offset": 226, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 40.96 / 16384.0),
        "unit": "1/s",
    },
    {
        "descr": "Val.mesure capteur vitesse Mot.trac B1",
        "offset": 228, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 40.96 / 16384.0),
        "unit": "1/s",
    },
    {
        "descr": "Val.mesure capteur vitesse Mot.trac B2",
        "offset": 230, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 40.96 / 16384.0),
        "unit": "1/s",
    },
    {
        "descr": "Puissance Circuit interm. OND A",
        "offset": 232, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 1.0 / 1.0),
        "unit": "kW",
    },
    {
        "descr": "Puissance Circuit interm. OND B",
        "offset": 234, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 1.0 / 1.0),
        "unit": "kW",
    },
    {
        "descr": "Degre de modulation reel BST A",
        "offset": 236, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 1.0 / 16384.0),
        "unit": None,
    },
    {
        "descr": "Degre de modulation reel BST B",
        "offset": 238, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 1.0 / 16384.0),
        "unit": None,
    },
    {
        "descr": "Conductance identifie BW A",
        "offset": 240, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 40.96 / 16384.0),
        "unit": "S",
    },
    {
        "descr": "Conductance identifie BW B",
        "offset": 242, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 40.96 / 16384.0),
        "unit": "S",
    },
    {
        "descr": "Temps etat Cste de temps A",
        "offset": 244, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 16384000.0 / 16384.0),
        "unit": "ms",
    },
    {
        "descr": "Temps etat Cste de temps B",
        "offset": 246, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 16384000.0 / 16384.0),
        "unit": "ms",
    },
    {
        "descr": "Anc. temps etat Cste de temps A",
        "offset": 248, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 16384000.0 / 16384.0),
        "unit": "ms",
    },
    {
        "descr": "Anc. temps etat Cste de temps B",
        "offset": 250, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 16384000.0 / 16384.0),
        "unit": "ms",
    },
    {
        "descr": "Etat Cste de temps OND A",
        "offset": 252, "size": 2, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Etat Cste de temps OND B",
        "offset": 254, "size": 2, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Anc. etat Cste de temps OND A",
        "offset": 256, "size": 2, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Anc. etat Cste de temps OND B",
        "offset": 258, "size": 2, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Tension de batterie",
        "offset": 260, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 16.384 / 16384.0),
        "unit": "V",
    },
    {
        "descr": "Frequence ventilateur central 1",
        "offset": 262, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 1024.0 / 16384.0),
        "unit": "Hz",
    },
    {
        "descr": "Frequence ventilateur central 2",
        "offset": 264, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 1024.0 / 16384.0),
        "unit": "Hz",
    },
    {
        "descr": "Frequence ventilateur BWL 1",
        "offset": 266, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 1024.0 / 16384.0),
        "unit": "Hz",
    },
    {
        "descr": "Frequence ventilateur BWL 2",
        "offset": 268, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 1024.0 / 16384.0),
        "unit": "Hz",
    },
    {
        "descr": "Temperature transformateur auxiliaire 1",
        "offset": 270, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 409.6 / 16384.0),
        "unit": "C",
    },
    {
        "descr": "Tension auxiliaires",
        "offset": 272, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 4096.0 / 16384.0),
        "unit": "V",
    },
    {
        "descr": "Courant auxiliaires",
        "offset": 274, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 1.0 / 1.0),
        "unit": "A",
    },
    {
        "descr": "Puissance circuit interm. auxiliaire",
        "offset": 276, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 1.0 / 1.0),
        "unit": "kW",
    },
    {
        "descr": "Temperature self LT 1",
        "offset": 278, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 409.6 / 16384.0),
        "unit": "C",
    },
    {
        "descr": "Temperature self LT 2",
        "offset": 280, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 409.6 / 16384.0),
        "unit": "C",
    },
    {
        "descr": "Tension self LT CV1",
        "offset": 282, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 4096.0 / 16384.0),
        "unit": "V",
    },
    {
        "descr": "Courant self LT CV1",
        "offset": 284, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 4096.0 / 16384.0),
        "unit": "A",
    },
    {
        "descr": "Puissance self LT",
        "offset": 286, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 1.0 / 1.0),
        "unit": "kW",
    },
    {
        "descr": "Defaut isole Mot.trac Essieu 1-3",
        "offset": 288, "size": 2, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Defaut isole Mot.trac Essieu 4-6",
        "offset": 290, "size": 2, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Defaut isole AE pneum. Essieu 1-3",
        "offset": 292, "size": 2, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Defaut isole AE pneum. Essieu 4-6",
        "offset": 294, "size": 2, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Validite Mot.trac._AE pneum.",
        "offset": 296, "size": 2, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Valeur ODO Priorite",
        "offset": 298, "size": 2, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "v-reelle Moteur_trac. Etat",
        "offset": 300, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 256.0 / 16384.0),
        "unit": "km/h",
    },
    {
        "descr": "v-reelle AE pneum. Etat",
        "offset": 302, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 256.0 / 16384.0),
        "unit": "km/h",
    },
    {
        "descr": "v-reelle Centrale odom.",
        "offset": 304, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 256.0 / 16384.0),
        "unit": "km/h",
    },
    {
        "descr": "v-reelle Moteur_trac.1",
        "offset": 306, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 256.0 / 16384.0),
        "unit": "km/h",
    },
    {
        "descr": "v-reelle Moteur_trac.2",
        "offset": 308, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 256.0 / 16384.0),
        "unit": "km/h",
    },
    {
        "descr": "v-reelle Moteur_trac.3",
        "offset": 310, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 256.0 / 16384.0),
        "unit": "km/h",
    },
    {
        "descr": "v-reelle Moteur_trac.4",
        "offset": 312, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 256.0 / 16384.0),
        "unit": "km/h",
    },
    {
        "descr": "Immobile",
        "offset": 314, "size": 1, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 0) else 0,
        "unit": None,
    },
    {
        "descr": "Mot d'etat 1 HDWI (general)",
        "offset": 316, "size": 2, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot d'etat 1 HDWO (general)",
        "offset": 318, "size": 2, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot d'etat 2 HDWO",
        "offset": 320, "size": 2, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot d'etat 3 HDWO",
        "offset": 322, "size": 2, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot d'etat 4 HDWO",
        "offset": 324, "size": 2, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot d'etat Peripherie externe",
        "offset": 326, "size": 2, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "EXT1: Erreur API",
        "offset": 328, "size": 1, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 0) else 0,
        "unit": None,
    },
    {
        "descr": "EXT1: Erreur CAN",
        "offset": 328, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 1) else 0,
        "unit": None,
    },
    {
        "descr": "EXT1: Erreur Heartbeat",
        "offset": 328, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 2) else 0,
        "unit": None,
    },
    {
        "descr": "EXT1: Erreur Emergency",
        "offset": 328, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 3) else 0,
        "unit": None,
    },
    {
        "descr": "EXT1: MMC/CAN erreur de controle",
        "offset": 328, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 4) else 0,
        "unit": None,
    },
    {
        "descr": "EXT1: CAN ok",
        "offset": 328, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 5) else 0,
        "unit": None,
    },
    {
        "descr": "EXT2: Erreur API",
        "offset": 328, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 6) else 0,
        "unit": None,
    },
    {
        "descr": "EXT2: Erreur CAN",
        "offset": 328, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 7) else 0,
        "unit": None,
    },
    {
        "descr": "EXT2: Erreur Heartbeat",
        "offset": 329, "size": 1, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 0) else 0,
        "unit": None,
    },
    {
        "descr": "EXT2: Erreur Emergency",
        "offset": 329, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 1) else 0,
        "unit": None,
    },
    {
        "descr": "EXT2: MMC/CAN erreur de controle",
        "offset": 329, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 2) else 0,
        "unit": None,
    },
    {
        "descr": "EXT2: CAN ok",
        "offset": 329, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 3) else 0,
        "unit": None,
    },
    {
        "descr": "EXT3: Erreur API",
        "offset": 329, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 4) else 0,
        "unit": None,
    },
    {
        "descr": "EXT3: Erreur CAN",
        "offset": 329, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 5) else 0,
        "unit": None,
    },
    {
        "descr": "EXT3: Erreur Heartbeat",
        "offset": 329, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 6) else 0,
        "unit": None,
    },
    {
        "descr": "EXT3: Erreur Emergency",
        "offset": 329, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 7) else 0,
        "unit": None,
    },
    {
        "descr": "EXT3: MMC/CAN erreur de controle",
        "offset": 330, "size": 1, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 0) else 0,
        "unit": None,
    },
    {
        "descr": "EXT3: CAN ok",
        "offset": 330, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 1) else 0,
        "unit": None,
    },
    {
        "descr": "EXT4: Erreur API",
        "offset": 330, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 2) else 0,
        "unit": None,
    },
    {
        "descr": "EXT4: Erreur CAN",
        "offset": 330, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 3) else 0,
        "unit": None,
    },
    {
        "descr": "EXT4: Erreur Heartbeat",
        "offset": 330, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 4) else 0,
        "unit": None,
    },
    {
        "descr": "EXT4: Erreur Emergency",
        "offset": 330, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 5) else 0,
        "unit": None,
    },
    {
        "descr": "EXT4: MMC/CAN erreur de controle",
        "offset": 330, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 6) else 0,
        "unit": None,
    },
    {
        "descr": "EXT4: CAN ok",
        "offset": 330, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 7) else 0,
        "unit": None,
    },
    {
        "descr": "EXT5: Erreur API",
        "offset": 331, "size": 1, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 0) else 0,
        "unit": None,
    },
    {
        "descr": "EXT5: Erreur CAN",
        "offset": 331, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 1) else 0,
        "unit": None,
    },
    {
        "descr": "EXT5: Erreur Heartbeat",
        "offset": 331, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 2) else 0,
        "unit": None,
    },
    {
        "descr": "EXT5: Erreur Emergency",
        "offset": 331, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 3) else 0,
        "unit": None,
    },
    {
        "descr": "EXT5: MMC/CAN erreur de controle",
        "offset": 331, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 4) else 0,
        "unit": None,
    },
    {
        "descr": "EXT5: CAN ok",
        "offset": 331, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 5) else 0,
        "unit": None,
    },
    {
        "descr": "EXT7: Erreur API",
        "offset": 331, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 6) else 0,
        "unit": None,
    },
    {
        "descr": "EXT7: Erreur CAN",
        "offset": 331, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 7) else 0,
        "unit": None,
    },
    {
        "descr": "EXT7: Erreur Heartbeat",
        "offset": 332, "size": 1, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 0) else 0,
        "unit": None,
    },
    {
        "descr": "EXT7: Erreur Emergency",
        "offset": 332, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 1) else 0,
        "unit": None,
    },
    {
        "descr": "EXT7: MMC/CAN erreur de controle",
        "offset": 332, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 2) else 0,
        "unit": None,
    },
    {
        "descr": "EXT7: CAN ok",
        "offset": 332, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 3) else 0,
        "unit": None,
    },
    {
        "descr": "EXT1: Numero de noeud (EmergErr)",
        "offset": 333, "size": 2, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "EXT1: Noeud (HeartbeErr)",
        "offset": 335, "size": 2, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "EXT2: Numero de noeud (EmergErr)",
        "offset": 337, "size": 2, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "EXT2: Noeud (HeartbeErr)",
        "offset": 339, "size": 2, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "EXT3: Numero de noeud (EmergErr)",
        "offset": 341, "size": 2, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "EXT3: Noeud (HeartbeErr)",
        "offset": 343, "size": 2, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "EXT4: Numero de noeud (EmergErr)",
        "offset": 345, "size": 2, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "EXT4: Noeud (HeartbeErr)",
        "offset": 347, "size": 2, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "EXT5: Numero de noeud (EmergErr)",
        "offset": 349, "size": 2, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "EXT5: Noeud (HeartbeErr)",
        "offset": 351, "size": 2, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "EXT7: Numero de noeud (EmergErr)",
        "offset": 353, "size": 2, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "EXT7: Noeud (Heartb Err)",
        "offset": 355, "size": 2, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "A216 Defaut de canal 1",
        "offset": 357, "size": 1, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 0) else 0,
        "unit": None,
    },
    {
        "descr": "A236 Defaut de canal 1",
        "offset": 357, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 1) else 0,
        "unit": None,
    },
    {
        "descr": "A15A Defaut de canal 1",
        "offset": 358, "size": 1, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 0) else 0,
        "unit": None,
    },
    {
        "descr": "A15A Defaut de canal 3",
        "offset": 359, "size": 1, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 0) else 0,
        "unit": None,
    },
    {
        "descr": "Mot logique 1 AE/AP",
        "offset": 360, "size": 2, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique 2 AE/AP",
        "offset": 362, "size": 2, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique 3 AE/AP",
        "offset": 364, "size": 2, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Temps etat OND A",
        "offset": 366, "size": 4, "signed": True,
        "xfn": lambda x: float(x * 53687100.0 / 1073740000.0),
        "unit": "s",
    },
    {
        "descr": "Temps etat OND B",
        "offset": 370, "size": 4, "signed": True,
        "xfn": lambda x: float(x * 53687100.0 / 1073740000.0),
        "unit": "s",
    },
    {
        "descr": "Temps etat CVS 1",
        "offset": 374, "size": 4, "signed": True,
        "xfn": lambda x: float(x * 53687100.0 / 1073740000.0),
        "unit": "s",
    },
    {
        "descr": "Temps etat OND A anc.",
        "offset": 378, "size": 4, "signed": True,
        "xfn": lambda x: float(x * 53687100.0 / 1073740000.0),
        "unit": "s",
    },
    {
        "descr": "Temps etat OND B anc.",
        "offset": 382, "size": 4, "signed": True,
        "xfn": lambda x: float(x * 53687100.0 / 1073740000.0),
        "unit": "s",
    },
    {
        "descr": "Temps etat CVS 1 anc.",
        "offset": 386, "size": 4, "signed": True,
        "xfn": lambda x: float(x * 53687100.0 / 1073740000.0),
        "unit": "s",
    },
    {
        "descr": "Mot d'etat 1 (couplage reseau)",
        "offset": 390, "size": 2, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot d'etat 2 (OND)",
        "offset": 392, "size": 2, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot d'etat 3 (CVS)",
        "offset": 394, "size": 2, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot d'etat 4 (HFR)",
        "offset": 396, "size": 2, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot d'etat 5 (inhib. CV et ELD)",
        "offset": 398, "size": 2, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot d'etat 6 (couplage reseau anc.)",
        "offset": 400, "size": 2, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot d'etat 7 (OND anc.)",
        "offset": 402, "size": 2, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot d'etat 8 (CVS anc.)",
        "offset": 404, "size": 2, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot d'etat 9 (ELD anc.)",
        "offset": 406, "size": 2, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Criteres de choix princ. plausibles",
        "offset": 408, "size": 1, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 0) else 0,
        "unit": None,
    },
    {
        "descr": "Parametres de tous les CV sont OK",
        "offset": 408, "size": 1, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 0) else 0,
        "unit": None,
    },
    {
        "descr": "SKNF Temps etat actuel",
        "offset": 410, "size": 4, "signed": True,
        "xfn": lambda x: float(x * 1.0 / 1.0),
        "unit": "s",
    },
    {
        "descr": "SKNF Temps etat ancien",
        "offset": 414, "size": 4, "signed": True,
        "xfn": lambda x: float(x * 1.0 / 1.0),
        "unit": "s",
    },
    {
        "descr": "SKNF Etat actuel",
        "offset": 418, "size": 2, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": "ZUST SKNF",
    },
    {
        "descr": "SKNF Etat ancien",
        "offset": 420, "size": 2, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": "ZUST SKNF",
    },
    {
        "descr": "Mot logique $93A7W61",
        "offset": 422, "size": 2, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique $93A7W62",
        "offset": 424, "size": 2, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique $93A7W63",
        "offset": 426, "size": 2, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique $93A7W65",
        "offset": 428, "size": 2, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique $93A7W66",
        "offset": 430, "size": 2, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique $93A7W67",
        "offset": 432, "size": 2, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique $93A7W68",
        "offset": 434, "size": 2, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Inhibition traction (propulsion)",
        "offset": 436, "size": 1, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 0) else 0,
        "unit": None,
    },
    {
        "descr": "Demande CV1 declencher (air/eau)",
        "offset": 436, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 1) else 0,
        "unit": None,
    },
    {
        "descr": "Inhib. tract. commande centralisee loco",
        "offset": 436, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 2) else 0,
        "unit": None,
    },
    {
        "descr": "Inhib. tract. Z-Max disponible<5kN",
        "offset": 436, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 3) else 0,
        "unit": None,
    },
    {
        "descr": "Inhib. tract. aucun Z-Ist construct.",
        "offset": 436, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 4) else 0,
        "unit": None,
    },
    {
        "descr": "Inhib. tract. (frein)",
        "offset": 436, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 5) else 0,
        "unit": None,
    },
    {
        "descr": "Vist > Vmax inhib. tract.",
        "offset": 436, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 6) else 0,
        "unit": None,
    },
    {
        "descr": "Inhib. tract. (direction)",
        "offset": 436, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 7) else 0,
        "unit": None,
    },
    {
        "descr": "AFB: Inhib. tract.",
        "offset": 437, "size": 1, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 0) else 0,
        "unit": None,
    },
    {
        "descr": "Ond. inhib. Z-ist sans Z-Soll",
        "offset": 437, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 1) else 0,
        "unit": None,
    },
    {
        "descr": "Inhib. tract. SW-conflit",
        "offset": 437, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 2) else 0,
        "unit": None,
    },
    {
        "descr": "Inhib. tract. WTB",
        "offset": 437, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 3) else 0,
        "unit": None,
    },
    {
        "descr": "Globale inhib. tract. ZBS",
        "offset": 437, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 4) else 0,
        "unit": None,
    },
    {
        "descr": "Globale inhib. tract. (frein)",
        "offset": 437, "size": 0, "signed": False,
        "xfn": lambda x: 1 if int(x) & (1 << 5) else 0,
        "unit": None,
    },
]

sibas_diesel = [
    {
        "descr": "Type",
        "offset": 0, "size": 2, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Datasetlen",
        "offset": 2, "size": 4, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "CarNo",  # "Numero de vehicule",
        "offset": 6, "size": 4, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Component",  # "Poste de commande",
        "offset": 10, "size": 2, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Memory",
        "offset": 12, "size": 2, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "MemVersionID Release",
        "offset": 14, "size": 2, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "MemVersionID Version",
        "offset": 16, "size": 2, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "SW-Version Release",
        "offset": 18, "size": 2, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "SW-Version Version",
        "offset": 20, "size": 2, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "CodeID",  # "Code de diagnostic",
        "offset": 22, "size": 4, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "OpMode",
        "offset": 26, "size": 2, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Count",
        "offset": 28, "size": 2, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "CountInsp",
        "offset": 30, "size": 2, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "DateTimeOccUTC",
        "offset": 32, "size": 4, "signed": True,
        "xfn": gmtime,
        "unit": None,
    },
    {
        "descr": "DateTimeOccLoc",
        "offset": 36, "size": 4, "signed": True,
        "xfn": gmtime,
        "unit": None,
    },
    {
        "descr": "DateTimeGoneUTC",
        "offset": 40, "size": 4, "signed": True,
        "xfn": gmtime,
        "unit": None,
    },
    {
        "descr": "DateTimeGoneLoc",
        "offset": 44, "size": 4, "signed": True,
        "xfn": gmtime,
        "unit": None,
    },
    {
        "descr": "EventCount",
        "offset": 48, "size": 4, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "EventStatus",
        "offset": 52, "size": 4, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Classification",
        "offset": 56, "size": 2, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "AccessMode ",
        "offset": 58, "size": 2, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "OccDataType",
        "offset": 60, "size": 2, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "OccDataLen",
        "offset": 64, "size": 4, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "OccTraceCount",
        "offset": 68, "size": 2, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "CountAbs",
        "offset": 70, "size": 2, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "CountAbsInsp",
        "offset": 72, "size": 2, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
]

sibas_sipa = [
    {
        "descr": "Type",
        "offset": 0, "size": 2, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Datasetlen",
        "offset": 2, "size": 4, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "CarNo",  # "Numero de vehicule",
        "offset": 6, "size": 4, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Component",  # "Poste de commande",
        "offset": 10, "size": 2, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Memory",
        "offset": 12, "size": 2, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "MemVersionID Release",
        "offset": 14, "size": 2, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "MemVersionID Version",
        "offset": 16, "size": 2, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "SW-Version Release",
        "offset": 18, "size": 2, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "SW-Version Version",
        "offset": 20, "size": 2, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "CodeID",  # "Code de diagnostic",
        "offset": 22, "size": 4, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "OpMode",
        "offset": 26, "size": 2, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Count",
        "offset": 28, "size": 2, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "CountInsp",
        "offset": 30, "size": 2, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "DateTimeOccUTC",
        "offset": 32, "size": 4, "signed": True,
        "xfn": gmtime,
        "unit": None,
    },
    {
        "descr": "DateTimeOccLoc",
        "offset": 36, "size": 4, "signed": True,
        "xfn": gmtime,
        "unit": None,
    },
    {
        "descr": "DateTimeGoneUTC",
        "offset": 40, "size": 4, "signed": True,
        "xfn": gmtime,
        "unit": None,
    },
    {
        "descr": "DateTimeGoneLoc",
        "offset": 44, "size": 4, "signed": True,
        "xfn": gmtime,
        "unit": None,
    },
    {
        "descr": "EventCount",
        "offset": 48, "size": 4, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "EventStatus",
        "offset": 52, "size": 4, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Classification",
        "offset": 56, "size": 2, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "AccessMode ",
        "offset": 58, "size": 2, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "OccDataType",
        "offset": 60, "size": 2, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "OccDataLen",
        "offset": 64, "size": 4, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "OccTraceCount",
        "offset": 68, "size": 2, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "CountAbs",
        "offset": 70, "size": 2, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "CountAbsInsp",
        "offset": 72, "size": 2, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique d'evenement 0",
        "offset": 76, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique d'evenement 1",
        "offset": 80, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique d'evenement 2",
        "offset": 84, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique d'evenement 3",
        "offset": 88, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique d'evenement 4",
        "offset": 92, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique d'evenement 5",
        "offset": 96, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique d'evenement 6",
        "offset": 100, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique d'evenement 7",
        "offset": 104, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Numero de voiture",
        "offset": 108, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Detrompage appareils",
        "offset": 112, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique inhibition materiel",
        "offset": 124, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Positionsdaten 0",
        "offset": 128, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Donnees de position 1",
        "offset": 132, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Donnees de position 2",
        "offset": 136, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Donnees de position 3",
        "offset": 140, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Donnees de position 4",
        "offset": 144, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique diagnostic materiel 1",
        "offset": 148, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique diagnostic materiel 2",
        "offset": 152, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique diagnostic materiel 3",
        "offset": 156, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique diagnostic materiel 4",
        "offset": 160, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique diagnostic materiel 5",
        "offset": 164, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique diagnostic materiel 6",
        "offset": 168, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique diagnostic materiel 7",
        "offset": 172, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique diagnostic materiel 8",
        "offset": 176, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique erreur de configuration 1",
        "offset": 180, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique erreur de configuration 2",
        "offset": 184, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique erreur de duree d'execution",
        "offset": 188, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique mesure de temperature CC",
        "offset": 192, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique mesure de temperature ETM",
        "offset": 196, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique surveillance de temperature",
        "offset": 200, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique captation de donnees",
        "offset": 204, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique materiel",
        "offset": 208, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique etats de contacteur 1",
        "offset": 212, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique etats de contacteur 2",
        "offset": 216, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique surveillance de vitesse",
        "offset": 220, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Reserve",
        "offset": 224, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique essai fonctionnel onduleur",
        "offset": 228, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Reserve",
        "offset": 224, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique surveillance de reglage",
        "offset": 236, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique dispositif de dechargement",
        "offset": 240, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Nombre de pointeurs nuls asynchrones",
        "offset": 244, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "ML comm. d'amorçage test de composant",
        "offset": 248, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique test de composant",
        "offset": 252, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "ML | Etat paramètres automatique",
        "offset": 256, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique limitations de couple",
        "offset": 260, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique surveillances des etats 1",
        "offset": 264, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique surveillances des etats 2",
        "offset": 268, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Reserve",
        "offset": 224, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "ML Z1 de CPU | ML Z2 de CPU",
        "offset": 276, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "ML temp. de CPU | ML ajout Z2 de CPU",
        "offset": 280, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "ML AEP Z1 de CPU | ML AEP Z2 de CPU",
        "offset": 284, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "ML Z1 vers CPU | ML Z2 vers CPU",
        "offset": 288, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "ML AEP | ML disponibilite vers CPU",
        "offset": 292, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "ML modes test | ML signaux vers CPU",
        "offset": 296, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Reserve | ML BG3 vers CPU",
        "offset": 300, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Reserve",
        "offset": 224, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Etat | Duree etat regulation ancien",
        "offset": 308, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Etat | Duree etat regulation actuel",
        "offset": 312, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Compteur millisecondes depuis reset",
        "offset": 316, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Compteur heures de fonctionnement",
        "offset": 320, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "ML configuration",
        "offset": 324, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "ML etat de fonctionnement",
        "offset": 328, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Reserve",
        "offset": 224, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Signal modèle d'impulsion",
        "offset": 336, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Flux stator alpha",
        "offset": 340, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 10.24 / 16384.0),
        "unit": "Vs",
    },
    {
        "descr": "Flux stator beta",
        "offset": 342, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 10.24 / 16384.0),
        "unit": "Vs",
    },
    {
        "descr": "Flux rotor alpha",
        "offset": 344, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 10.24 / 16384.0),
        "unit": "Vs",
    },
    {
        "descr": "Flux rotor beta",
        "offset": 346, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 10.24 / 16384.0),
        "unit": "Vs",
    },
    {
        "descr": "Valeur de modèle courant stator alpha",
        "offset": 348, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 4096.0 / 16384.0),
        "unit": "A",
    },
    {
        "descr": "Valeur de modèle courant stator beta",
        "offset": 350, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 4096.0 / 16384.0),
        "unit": "A",
    },
    {
        "descr": "Valeur de mesure courant stator alpha",
        "offset": 352, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 4096.0 / 16384.0),
        "unit": "A",
    },
    {
        "descr": "Valeur de mesure courant stator beta",
        "offset": 354, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 4096.0 / 16384.0),
        "unit": "A",
    },
    {
        "descr": "Courant stator phase L2",
        "offset": 356, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 4096.0 / 16384.0),
        "unit": "A",
    },
    {
        "descr": "Courant stator phase L3",
        "offset": 358, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 4096.0 / 16384.0),
        "unit": "A",
    },
    {
        "descr": "Tension du circuit intermediaire",
        "offset": 360, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 4096.0 / 16384.0),
        "unit": "V ",
    },
    {
        "descr": "Taux de modulation onduleur",
        "offset": 362, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 1.0 / 16384.0),
        "unit": None,
    },
    {
        "descr": "Courant alternateur phase L1",
        "offset": 364, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 4096.0 / 16384.0),
        "unit": "A",
    },
    {
        "descr": "Courant alternateur phase L2",
        "offset": 366, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 4096.0 / 16384.0),
        "unit": "A",
    },
    {
        "descr": "Tension ligne de train",
        "offset": 368, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 4096.0 / 16384.0),
        "unit": "V",
    },
    {
        "descr": "Courant ligne de train",
        "offset": 370, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 4096.0 / 16384.0),
        "unit": "A",
    },
    {
        "descr": "Vitesse pour regulation onduleur",
        "offset": 372, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 81.92 / 16384.0),
        "unit": "1/s",
    },
    {
        "descr": "Valeur de mesure vitesse 1",
        "offset": 374, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 81.92 / 16384.0),
        "unit": "1/s",
    },
    {
        "descr": "Valeur de mesure vitesse 2",
        "offset": 376, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 81.92 / 16384.0),
        "unit": "1/s",
    },
    {
        "descr": "Valeur de mesure vitesse 3",
        "offset": 378, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 81.92 / 16384.0),
        "unit": "1/s",
    },
    {
        "descr": "Valeur de mesure vitesse 4",
        "offset": 380, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 81.92 / 16384.0),
        "unit": "1/s",
    },
    {
        "descr": "Reserve",
        "offset": 224, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Reserve",
        "offset": 224, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Vitesse du vehicule",
        "offset": 386, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 81.92 / 16384.0),
        "unit": "1/s",
    },
    {
        "descr": "Vitesse de reference",
        "offset": 388, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 81.92 / 16384.0),
        "unit": "1/s",
    },
    {
        "descr": "Consigne couple de CPU",
        "offset": 390, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 32768.0 / 16384.0),
        "unit": "Nm",
    },
    {
        "descr": "Consigne couple après limitation",
        "offset": 392, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 32768.0 / 16384.0),
        "unit": "Nm",
    },
    {
        "descr": "Mesure couple",
        "offset": 394, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 32768.0 / 16384.0),
        "unit": "Nm",
    },
    {
        "descr": "Resistance rotor",
        "offset": 396, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 1.024 / 16384.0),
        "unit": "Ohm",
    },
    {
        "descr": "Resistance stator",
        "offset": 398, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 1.024 / 16384.0),
        "unit": "Ohm",
    },
    {
        "descr": "Tension correction CC alpha",
        "offset": 400, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 4.096 / 16384.0),
        "unit": "V",
    },
    {
        "descr": "Tension correction CC beta",
        "offset": 402, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 4.096 / 16384.0),
        "unit": "V",
    },
    {
        "descr": "Consigne limitation de vitesse",
        "offset": 404, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 81.92 / 16384.0),
        "unit": "1/s",
    },
    {
        "descr": "Puissance onduleur",
        "offset": 406, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 16380000.0 / 16384.0),
        "unit": "W",
    },
    {
        "descr": "Tension de ligne",
        "offset": 408, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 4096.0 / 16384.0),
        "unit": "V",
    },
    {
        "descr": "Courant de ligne convertisseur statique",
        "offset": 410, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 4096.0 / 16384.0),
        "unit": "A",
    },
    {
        "descr": "Conductance resistance de freinage/MUB",
        "offset": 412, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 40.96 / 16384.0),
        "unit": "A/V",
    },
    {
        "descr": "Consigne tension hacheur de freinage",
        "offset": 414, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 4096.0 / 16384.0),
        "unit": "V",
    },
    {
        "descr": "Taux de modulation hacheur de freinage",
        "offset": 416, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 1.0 / 16384.0),
        "unit": None,
    },
    {
        "descr": "Reserve",
        "offset": 224, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Courant de ligne vehicule",
        "offset": 420, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 4096.0 / 16384.0),
        "unit": "A",
    },
    {
        "descr": "Courant inverse convertisseur statique",
        "offset": 422, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 4096.0 / 16384.0),
        "unit": "A",
    },
    {
        "descr": "Tension du circuit intermediaire lissee",
        "offset": 424, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 4096.0 / 16384.0),
        "unit": "V",
    },
    {
        "descr": "Tension filtre en T",
        "offset": 426, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 4096.0 / 16384.0),
        "unit": "V",
    },
    {
        "descr": "Tension detection de mise a la terre",
        "offset": 428, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 4096.0 / 16384.0),
        "unit": "V",
    },
    {
        "descr": "Pression liquide de refroidissement",
        "offset": 430, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 1024000.0 / 16384.0),
        "unit": "Pa",
    },
    {
        "descr": "Reserve",
        "offset": 224, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Reserve",
        "offset": 224, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Reserve",
        "offset": 224, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Reserve",
        "offset": 224, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Reserve",
        "offset": 224, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Reserve",
        "offset": 224, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Temp.entree liquide de refroidissement 1",
        "offset": 444, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 409.6 / 16384.0),
        "unit": "C",
    },
    {
        "descr": "141 Temp.entree liquide de refroidissement 2",
        "offset": 446, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 409.6 / 16384.0),
        "unit": "C",
    },
    {
        "descr": "Temperature radiateur capteur 1",
        "offset": 448, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 409.6 / 16384.0),
        "unit": "C",
    },
    {
        "descr": "Temperature radiateur capteur 2",
        "offset": 450, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 409.6 / 16384.0),
        "unit": "C",
    },
    {
        "descr": "Temperature radiateur capteur 3",
        "offset": 452, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 409.6 / 16384.0),
        "unit": "C",
    },
    {
        "descr": "Temperature radiateur capteur 4",
        "offset": 454, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 409.6 / 16384.0),
        "unit": "C",
    },
    {
        "descr": "Valeur de mesure temperature module SIP",
        "offset": 456, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 409.6 / 16384.0),
        "unit": "C",
    },
    {
        "descr": "Maximum temperature jonction OND IGBT",
        "offset": 458, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 409.6 / 16384.0),
        "unit": "C",
    },
    {
        "descr": "Maximum temperature jonction OND diodes",
        "offset": 460, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 409.6 / 16384.0),
        "unit": "C",
    },
    {
        "descr": "Max. temp. jonction hacheur de freinage",
        "offset": 462, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 409.6 / 16384.0),
        "unit": "C",
    },
    {
        "descr": "Valeur de modele temperature plancher",
        "offset": 464, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 409.6 / 16384.0),
        "unit": "C",
    },
]

sibas_sipaux = [
    {
        "descr": "Type",
        "offset": 0, "size": 2, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Datasetlen",
        "offset": 2, "size": 4, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "CarNo",  # "Numero de vehicule",
        "offset": 6, "size": 4, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Component",  # "Poste de commande",
        "offset": 10, "size": 2, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Memory",  # SubComponent
        "offset": 12, "size": 2, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "MemVersionID Release",
        "offset": 14, "size": 2, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "MemVersionID Version",
        "offset": 16, "size": 2, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "SW-Version Release",
        "offset": 18, "size": 2, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "SW-Version Version",
        "offset": 20, "size": 2, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "CodeID",  # "Code de diagnostic",
        "offset": 22, "size": 4, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "OpMode",
        "offset": 26, "size": 2, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Count",
        "offset": 28, "size": 2, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "CountInsp",
        "offset": 30, "size": 2, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "DateTimeOccUTC",
        "offset": 32, "size": 4, "signed": True,
        "xfn": gmtime,
        "unit": None,
    },
    {
        "descr": "DateTimeOccLoc",
        "offset": 36, "size": 4, "signed": True,
        "xfn": gmtime,
        "unit": None,
    },
    {
        "descr": "DateTimeGoneUTC",
        "offset": 40, "size": 4, "signed": True,
        "xfn": gmtime,
        "unit": None,
    },
    {
        "descr": "DateTimeGoneLoc",
        "offset": 44, "size": 4, "signed": True,
        "xfn": gmtime,
        "unit": None,
    },
    {
        "descr": "EventCount",
        "offset": 48, "size": 4, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "EventStatus",
        "offset": 52, "size": 4, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Classification",
        "offset": 56, "size": 2, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "AccessMode ",
        "offset": 58, "size": 2, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "OccDataType",
        "offset": 60, "size": 2, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "OccDataLen",
        "offset": 64, "size": 4, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "OccTraceCount",
        "offset": 68, "size": 2, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "CountAbs",
        "offset": 70, "size": 2, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "CountAbsInsp",
        "offset": 72, "size": 2, "signed": True,
        "xfn": lambda x: int(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique d'evenement 0",
        "offset": 76, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique d'evenement 1",
        "offset": 80, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique d'evenement 2",
        "offset": 84, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique d'evenement 3",
        "offset": 88, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique d'evenement 4",
        "offset": 92, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique d'evenement 5",
        "offset": 96, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique d'evenement 6",
        "offset": 100, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique d'evenement 7",
        "offset": 104, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Numero de voiture",
        "offset": 108, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Detrompage appareils",
        "offset": 112, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Donnees de position 0",
        "offset": 128, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Donnees de position 1",
        "offset": 132, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Donnees de position 2",
        "offset": 136, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Donnees de position 3",
        "offset": 140, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Donnees de position 4",
        "offset": 144, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique diagnostic materiel 1",
        "offset": 148, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique diagnostic materiel 2",
        "offset": 152, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique diagnostic materiel 3",
        "offset": 156, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique diagnostic materiel 4",
        "offset": 160, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique diagnostic materiel 5",
        "offset": 164, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique diagnostic materiel 6",
        "offset": 168, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique diagnostic materiel 7",
        "offset": 172, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique diagnostic materiel 8",
        "offset": 176, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique erreur système",
        "offset": 180, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "ML surveillance | mesure de temperature",
        "offset": 184, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique materiel",
        "offset": 188, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique essai fonctionnel CVS",
        "offset": 212, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique surveillances des etats",
        "offset": 232, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "ML 1 de CPU | ML 2 de CPU",
        "offset": 240, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "ML 1 vers CPU | ML 2 vers CPU",
        "offset": 244, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "ML 3 vers CPU | Reserve",
        "offset": 248, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "ML BG1 de CPU | ML BG2 de CPU",
        "offset": 252, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Etat | Duree etat regulation ancien",
        "offset": 264, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Etat | Duree etat regulation actuel",
        "offset": 268, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Compteur millisecondes depuis reset",
        "offset": 272, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Numero de paramètre actuel",
        "offset": 276, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Mot logique configuration",
        "offset": 280, "size": 4, "signed": False,
        "xfn": lambda x: hex(x * 1 / 1),
        "unit": None,
    },
    {
        "descr": "Courant de charge alpha primaire",
        "offset": 296, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 4096.0 / 16384.0),
        "unit": "A",
    },
    {
        "descr": "Courant de charge bêta primaire",
        "offset": 298, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 4096.0 / 16384.0),
        "unit": "A",
    },
    {
        "descr": "Courant de charge D secondaire",
        "offset": 300, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 4096.0 / 16384.0),
        "unit": "A",
    },
    {
        "descr": "Courant de charge Q secondaire",
        "offset": 302, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 4096.0 / 16384.0),
        "unit": "A",
    },
    {
        "descr": "Sortie regulateur courant D secondaire",
        "offset": 304, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 4096.0 / 16384.0),
        "unit": "A",
    },
    {
        "descr": "Sortie regulateur courant Q secondaire",
        "offset": 306, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 4096.0 / 16384.0),
        "unit": "A",
    },
    {
        "descr": "CC courant de charge alpha secondaire",
        "offset": 308, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 4096.0 / 16384.0),
        "unit": "A",
    },
    {
        "descr": "CC courant de charge beta secondaire",
        "offset": 310, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 4096.0 / 16384.0),
        "unit": "A",
    },
    {
        "descr": "Decalage courant de charge L1 primaire",
        "offset": 312, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 4096.0 / 16384.0),
        "unit": "A",
    },
    {
        "descr": "Decalage courant de charge L2 primaire",
        "offset": 314, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 4096.0 / 16384.0),
        "unit": "A",
    },
    {
        "descr": "Courant de charge L1 primaire",
        "offset": 316, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 4096.0 / 16384.0),
        "unit": "A",
    },
    {
        "descr": "Courant de charge L2 primaire",
        "offset": 318, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 4096.0 / 16384.0),
        "unit": "A",
    },
    {
        "descr": "Tension de charge alpha secondaire",
        "offset": 328, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 4096.0 / 16384.0),
        "unit": "V",
    },
    {
        "descr": "Tension de charge bêta secondaire",
        "offset": 330, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 4096.0 / 16384.0),
        "unit": "V",
    },
    {
        "descr": "Tension de charge D secondaire",
        "offset": 332, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 4096.0 / 16384.0),
        "unit": "V",
    },
    {
        "descr": "Tension de charge Q secondaire",
        "offset": 334, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 4096.0 / 16384.0),
        "unit": "V",
    },
    {
        "descr": "Consigne tension de charge alpha prim.",
        "offset": 336, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 4096.0 / 16384.0),
        "unit": "V",
    },
    {
        "descr": "Consigne tension de charge bêta primaire",
        "offset": 338, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 4096.0 / 16384.0),
        "unit": "V",
    },
    {
        "descr": "Decalage transformateur de tension L1-L2",
        "offset": 340, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 4096.0 / 16384.0),
        "unit": "V",
    },
    {
        "descr": "Decalage transformateur de tension L2-L3",
        "offset": 342, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 4096.0 / 16384.0),
        "unit": "V",
    },
    {
        "descr": "Tension de charge phase L1-L2 secondaire",
        "offset": 344, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 4096.0 / 16384.0),
        "unit": "V",
    },
    {
        "descr": "Tension de charge phase L2-L3 secondaire",
        "offset": 346, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 4096.0 / 16384.0),
        "unit": "V",
    },
    {
        "descr": "Consigne tension de charge secondaire",
        "offset": 348, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 4096.0 / 16384.0),
        "unit": "V",
    },
    {
        "descr": "Sortie reg. limitation de courant sec.",
        "offset": 350, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 4096.0 / 16384.0),
        "unit": "V",
    },
    {
        "descr": "Tension du circuit intermediaire",
        "offset": 352, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 4096.0 / 16384.0),
        "unit": "V",
    },
    {
        "descr": "Taux de modulation CVS",
        "offset": 354, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 1.0 / 16384.0),
        "unit": None,
    },
    {
        "descr": "Frequence de sortie",
        "offset": 362, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 1024.0 / 16384.0),
        "unit": "Hz",
    },
    {
        "descr": "Consigne frequence de sortie de CPU",
        "offset": 364, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 1024.0 / 16384.0),
        "unit": "Hz",
    },
    {
        "descr": "Angle de reference (degre)",
        "offset": 366, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 90.002 / 16384.0),
        "unit": None,
    },
    {
        "descr": "Puissance active CVS",
        "offset": 370, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 16380000.0 / 16384.0),
        "unit": "W",
    },
    {
        "descr": "Puissance reactive CVS",
        "offset": 372, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 16380000.0 / 16384.0),
        "unit": "W",
    },
    {
        "descr": "Temp. entree liquide de refroidissement",
        "offset": 378, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 409.6 / 16384.0),
        "unit": "C",
    },
    {
        "descr": "Temperature module SIP",
        "offset": 380, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 409.6 / 16384.0),
        "unit": "C",
    },
    {
        "descr": "Maximum temperature jonction CVS IGBT",
        "offset": 382, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 409.6 / 16384.0),
        "unit": "C",
    },
    {
        "descr": "Maximum temperature jonction CVS diodes",
        "offset": 384, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 409.6 / 16384.0),
        "unit": "C",
    },
    {
        "descr": "Valeur de modèle temp. plancher CVS",
        "offset": 386, "size": 2, "signed": True,
        "xfn": lambda x: float(x * 409.6 / 16384.0),
        "unit": "C",
    },
]

sibas_op_data = [
    {
        "descr": "Type",
        "offset": 0,
        "signed": True,
        "size": 2,
        "unit": "",
        "xfn": lambda x: int(x * 1 / 1)
    },
    {
        "descr": "Datasetlen",
        "offset": 2,
        "signed": True,
        "size": 4,
        "unit": "",
        "xfn": lambda x: int(x * 1 / 1)
    },
    {
        "descr": "CarNo",  # Numero de vehicule
        "offset": 6,
        "signed": True,
        "size": 4,
        "unit": "",
        "xfn": lambda x: int(x * 1 / 1)
    },
    {
        "descr": "Component",  # Poste de commande
        "offset": 10,
        "signed": True,
        "size": 2,
        "unit": "",
        "xfn": lambda x: int(x * 1 / 1)
    },
    {
        "descr": "Memory",  # "SubComponent",
        "offset": 12,
        "signed": True,
        "size": 2,
        "unit": "",
        "xfn": lambda x: int(x * 1 / 1)
    },
    {
        "descr": "MemVersionID Release",
        "offset": 14,
        "signed": False,
        "size": 2,
        "unit": "",
        "xfn": lambda x: hex(x * 1 / 1)
    },
    {
        "descr": "MemVersionID Version",
        "offset": 16,
        "signed": False,
        "size": 2,
        "unit": "",
        "xfn": lambda x: hex(x * 1 / 1)
    },
    {
        "descr": "SW-VersionID Release",
        "offset": 18,
        "signed": False,
        "size": 2,
        "unit": "",
        "xfn": lambda x: hex(x * 1 / 1)
    },
    {
        "descr": "SW-VersionID Version",
        "offset": 20,
        "signed": False,
        "size": 2,
        "unit": "",
        "xfn": lambda x: hex(x * 1 / 1)
    },
    {
        "descr": "CodeID",  # "Code de diagnostic"
        "offset": 22,
        "signed": True,
        "size": 4,
        "unit": "",
        "xfn": lambda x: int(x * 1 / 1)
    },
    {
        "descr": "OpMode",
        "offset": 26,
        "signed": False,
        "size": 2,
        "unit": "",
        "xfn": lambda x: hex(x * 1 / 1)
    },
    {
        "descr": "Count",
        "offset": 28,
        "signed": True,
        "size": 2,
        "unit": "",
        "xfn": lambda x: int(x * 1 / 1)
    },
    {
        "descr": "CountInsp",
        "offset": 30,
        "signed": True,
        "size": 2,
        "unit": "",
        "xfn": lambda x: int(x * 1 / 1)
    },
    {
        "descr": "DateTimeOccUTC",
        "offset": 32,
        "signed": True,
        "size": 4,
        "unit": "",
        "xfn": gmtime
    },
    {
        "descr": "DateTimeOccLoc",
        "offset": 36,
        "signed": True,
        "size": 4,
        "unit": "",
        "xfn": gmtime
    },
    {
        "descr": "DateTimeGoneUTC",
        "offset": 40,
        "signed": True,
        "size": 4,
        "unit": "",
        "xfn": gmtime
    },
    {
        "descr": "DateTimeGoneLoc",
        "offset": 44,
        "signed": True,
        "size": 4,
        "unit": "",
        "xfn": gmtime
    },
    {
        "descr": "EventCount",
        "offset": 48,
        "signed": True,
        "size": 4,
        "unit": "",
        "xfn": lambda x: int(x * 1 / 1)
    },
    {
        "descr": "EventStatus",
        "offset": 52,
        "signed": True,
        "size": 4,
        "unit": "",
        "xfn": lambda x: int(x * 1 / 1)
    },
    {
        "descr": "Classification",
        "offset": 56,
        "signed": True,
        "size": 2,
        "unit": "",
        "xfn": lambda x: int(x * 1 / 1)
    },
    {
        "descr": "AccessMode",
        "offset": 58,
        "signed": False,
        "size": 2,
        "unit": "",
        "xfn": lambda x: hex(x * 1 / 1)
    },
    {
        "descr": "OccDataType",
        "offset": 60,
        "signed": True,
        "size": 2,
        "unit": "",
        "xfn": lambda x: int(x * 1 / 1)
    },
    {
        "descr": "Reserve1",
        "offset": 62,
        "signed": True,
        "size": 2,
        "unit": "",
        "xfn": lambda x: int(x * 1 / 1)
    },
    {
        "descr": "OccDataLen",
        "offset": 64,
        "signed": True,
        "size": 4,
        "unit": "",
        "xfn": lambda x: int(x * 1 / 1)
    },
    {
        "descr": "OccTraceCount",
        "offset": 68,
        "signed": True,
        "size": 2,
        "unit": "",
        "xfn": lambda x: int(x * 1 / 1)
    },
    {
        "descr": "CountAbs",
        "offset": 70,
        "signed": True,
        "size": 2,
        "unit": "",
        "xfn": lambda x: int(x * 1 / 1)
    },
    {
        "descr": "CountAbsInsp",
        "offset": 72,
        "signed": True,
        "size": 2,
        "unit": "",
        "xfn": lambda x: int(x * 1 / 1)
    },
    {
        "descr": "Reserve2",
        "offset": 74,
        "signed": True,
        "size": 2,
        "unit": "",
        "xfn": lambda x: int(x * 1 / 1)
    },
    {
        # "descr": "Kilometrage ",
        "descr": "Mileage_ZSGM",
        "offset": 76,
        "signed": True,
        "size": 4,
        "unit": "km",
        "xfn": lambda x: int(x * 1 / 1)
    },
    {
        # "descr": "Km parcourus depuis l'effacement",
        "descr": "Mileage_at_last_reset",
        "offset": 80,
        "signed": True,
        "size": 4,
        "unit": "km",
        "xfn": lambda x: int(x * 1 / 1)
    },
    {
        # "descr": "Duree depuis l'effacement",
        "descr": "Time_since_last_reset",
        "offset": 84,
        "signed": True,
        "size": 4,
        "unit": "s",
        "xfn": gmtime
    },
    {
        # "descr": "Heures de service-LCU activee",
        "descr": "LCU_is_ON",
        "offset": 88,
        "signed": True,
        "size": 4,
        "unit": "h",
        "xfn": lambda x: int(x * 1 / 1)
    },
    {
        # "descr": "La locomotive se deplace",
        "descr": "Locomotive_moves",
        "offset": 92,
        "signed": True,
        "size": 4,
        "unit": "h",
        "xfn": lambda x: int(x * 1 / 1)
    },
    {
        # "descr": "Chargeur de batterie",
        "descr": "Battery_charger",
        "offset": 96,
        "signed": True,
        "size": 4,
        "unit": "h",
        "xfn": lambda x: int(x * 1 / 1)
    },
    {
        # "descr": "Auxiliaires, pompe \u0088 eau",
        "descr": "Water_pump_auxiliaries",
        "offset": 100,
        "signed": True,
        "size": 4,
        "unit": "h",
        "xfn": lambda x: int(x * 1 / 1)
    },
    {
        # "descr": "Ventilateur central en marche, lent",
        "descr": "Stunden_ZFMLuefter_langsam",
        "offset": 104,
        "signed": True,
        "size": 4,
        "unit": "h",
        "xfn": lambda x: int(x * 1 / 1)
    },
    {
        # "descr": "Ventilateur central en marche, vite",
        "descr": "Stunden_ZFMLuefter_schnell",
        "offset": 108,
        "signed": True,
        "size": 4,
        "unit": "h",
        "xfn": lambda x: int(x * 1 / 1)
    },
    {
        # "descr": "Ventilateur bloc self LT en marche",
        "descr": "Blower_train_heating_line_is_ON",
        "offset": 112,
        "signed": True,
        "size": 4,
        "unit": "h",
        "xfn": lambda x: int(x * 1 / 1)
    },
    {
        # "descr": "Compresseur en marche",
        "descr": "Compressor_is_ON",
        "offset": 116,
        "signed": True,
        "size": 4,
        "unit": "h",
        "xfn": lambda x: int(x * 1 / 1)
    },
    {
        # "descr": "Self LT en marche",
        "descr": "Train_heating_is_ON",
        "offset": 120,
        "signed": True,
        "size": 4,
        "unit": "h",
        "xfn": lambda x: int(x * 1 / 1)
    },
    {
        # "descr": "OND en marche",
        "descr": "INV_is_triggering",
        "offset": 124,
        "signed": True,
        "size": 4,
        "unit": "h",
        "xfn": lambda x: int(x * 1 / 1)
    },
    {
        # "descr": "OND en etat aller",
        "descr": "INV_in_mode_drive",
        "offset": 128,
        "signed": True,
        "size": 4,
        "unit": "h",
        "xfn": lambda x: int(x * 1 / 1)
    },
    {
        # "descr": "OND en etat    freiner",
        "descr": "INV_in_mode_braking",
        "offset": 132,
        "signed": True,
        "size": 4,
        "unit": "h",
        "xfn": lambda x: int(x * 1 / 1)
    },
    {
        # "descr": "Frein direct en marche",
        "descr": "Direct_brake_is_active",
        "offset": 136,
        "signed": True,
        "size": 4,
        "unit": "h",
        "xfn": lambda x: int(x * 1 / 1)
    },
    {
        # "descr": "Frein boggie 1 en marche",
        "descr": "Brake_bogie_1_is_active",
        "offset": 140,
        "signed": True,
        "size": 4,
        "unit": "h",
        "xfn": lambda x: int(x * 1 / 1)
    },
    {
        # "descr": "Frein boggie 2 en marche",
        "descr": "Brake_bogie_2_is_active",
        "offset": 144,
        "signed": True,
        "size": 4,
        "unit": "h",
        "xfn": lambda x: int(x * 1 / 1)
    },
    {
        # "descr": "Moteur diesel marche",
        "descr": "Diesel_engine_is_ON",
        "offset": 148,
        "signed": True,
        "size": 4,
        "unit": "h",
        "xfn": lambda x: int(x * 1 / 1)
    },
    {
        # "descr": "Alternateur    marche",
        "descr": "Generator_is_ON",
        "offset": 152,
        "signed": True,
        "size": 4,
        "unit": "h",
        "xfn": lambda x: int(x * 1 / 1)
    },
    {
        # "descr": "Ventilateur resist. de freinage, lent",
        "descr": "Brake_resist_slow",
        "offset": 156,
        "signed": True,
        "size": 4,
        "unit": "h",
        "xfn": lambda x: int(x * 1 / 1)
    },
    {
        # "descr": "Ventilateur resist. de freinage, vite",
        "descr": "Brake_resist_fast",
        "offset": 160,
        "signed": True,
        "size": 4,
        "unit": "h",
        "xfn": lambda x: int(x * 1 / 1)
    },
    {
        # "descr": "Contacteur C-CRP",
        "descr": "Contactor_C_CRP",
        "offset": 164,
        "signed": True,
        "size": 4,
        "unit": "",
        "xfn": lambda x: int(x * 1 / 1)
    },
    {
        # "descr": "Contacteur C-VT(SELF)",
        "descr": "Contactor_C_VT_SELF",
        "offset": 168,
        "signed": True,
        "size": 4,
        "unit": "",
        "xfn": lambda x: int(x * 1 / 1)
    },
    {
        # "descr": "Contacteur =34-K01 C-CH",
        "descr": "Contactor_34_K01_C_CH",
        "offset": 172,
        "signed": True,
        "size": 4,
        "unit": "",
        "xfn": lambda x: int(x * 1 / 1)
    },
    {
        # "descr": "Contacteur C-CH-EXT",
        "descr": "Contactor_C_CH_EXT",
        "offset": 176,
        "signed": True,
        "size": 4,
        "unit": "",
        "xfn": lambda x: int(x * 1 / 1)
    },
    {
        # "descr": "Contacteur C1(CH-T)",
        "descr": "Contactor_C1_CH_T",
        "offset": 180,
        "signed": True,
        "size": 4,
        "unit": "",
        "xfn": lambda x: int(x * 1 / 1)
    },
    {
        # "descr": "Contacteur d'excitation",
        "descr": "Field_contactor",
        "offset": 184,
        "signed": True,
        "size": 4,
        "unit": "",
        "xfn": lambda x: int(x * 1 / 1)
    },
    {
        # "descr": "Contacteur C1-VT(RH)",
        "descr": "Count_BWL_contr_step_1",
        "offset": 188,
        "signed": True,
        "size": 4,
        "unit": "",
        "xfn": lambda x: int(x * 1 / 1)
    },
    {
        # "descr": "Contacteur C3-VT(RH)",
        "descr": "Count_BWL_contr_step_2",
        "offset": 192,
        "signed": True,
        "size": 4,
        "unit": "",
        "xfn": lambda x: int(x * 1 / 1)
    },
    {
        # "descr": "Contacteur C1-VT(TR)",
        "descr": "Central_blower_contr_step_1",
        "offset": 196,
        "signed": True,
        "size": 4,
        "unit": "",
        "xfn": lambda x: int(x * 1 / 1)
    },
    {
        # "descr": "Contacteur C3-VT(TR)",
        "descr": "Central_blower_contr_step_2",
        "offset": 200,
        "signed": True,
        "size": 4,
        "unit": "",
        "xfn": lambda x: int(x * 1 / 1)
    },
    {
        # "descr": "Frein direct",
        "descr": "Direct_brake",
        "offset": 204,
        "signed": True,
        "size": 4,
        "unit": "",
        "xfn": lambda x: int(x * 1 / 1)
    },
    {
        # "descr": "Frein boggie 1 active",
        "descr": "Brake_bogie_1_is_active",
        "offset": 208,
        "signed": True,
        "size": 4,
        "unit": "",
        "xfn": lambda x: int(x * 1 / 1)
    },
    {
        # "descr": "Frein boggie 2 active",
        "descr": "Brake_bogie_2_is_active",
        "offset": 212,
        "signed": True,
        "size": 4,
        "unit": "",
        "xfn": lambda x: int(x * 1 / 1)
    },
    {
        # "descr": "Frein elec.",
        "descr": "Electric_brake",
        "offset": 216,
        "signed": True,
        "size": 4,
        "unit": "",
        "xfn": lambda x: int(x * 1 / 1)
    },
    {
        # "descr": "Demarrage moteur diesel ",
        "descr": "Starts_diesel_engine",
        "offset": 220,
        "signed": True,
        "size": 4,
        "unit": "",
        "xfn": lambda x: int(x * 1 / 1)
    },
    {
        # "descr": "Demarrage d'urgence moteur diesel",
        "descr": "Emergency_starts_diesel_engine",
        "offset": 224,
        "signed": True,
        "size": 4,
        "unit": "",
        "xfn": lambda x: int(x * 1 / 1)
    },
    {
        # "descr": "Arret d'urgence moteur diesel",
        "descr": "Emergency_stops_diesel_engine",
        "offset": 228,
        "signed": True,
        "size": 4,
        "unit": "",
        "xfn": lambda x: int(x * 1 / 1)
    }
]
